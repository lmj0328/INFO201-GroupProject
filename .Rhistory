library(ggplot2)
library(microbenchmark)
## Reads in the UFOCoords data file into a data frame
dataset <- read.csv("data/UFOCoords.csv", stringsAsFactors = FALSE)
## Function for filtering the data frame
ufo_filter_df <- function(dataset) {
usa_count <- dataset %>% count(Country == "USA")
}
## Function for filtering the tibble
ufo_filter_tibble <- function(dataset) {
## Creates a tibble from the data frame
data_tibble <- as_tibble(dataset)
usa_count_tib <- data_tibble %>% count(Country == "USA")
}
output_result <- function() {
## Runs microbenchmark on dataframe
res_1 <- microbenchmark(ufo_filter_df(dataset), times=500L)
## Runs microbenchmark on tibble
res_2 <- microbenchmark(ufo_filter_tibble(dataset), times=500L)
## Creates data frame from microbenchmark results
result_1 <- summary(res_1)
result_2 <- summary(res_2)
## Combines results of both tests
total <- rbind(result_1, result_2)
## Writes output to .csv file specified in if/else statement
write.csv(total, file = fileName)
}
## Sets enviornment for each team member. Uses fileName for output
if(Sys.info()["user"] == "griff") {
PROJECTDIR <- file.path("~", "info201_assignments", "assignment_7", "a7-collaboration-jmjc")
fileName <- paste0(PROJECTDIR, "/data/griff_results.csv")
print("yang, griff, catherine, cinds")
output_result()
} else if (Sys.info()["user"] == "cinds") {
PROJECTDIR <- file.path("Desktop", "INFO201", "a7-collaboration-jmjc")
fileName <- paste0(PROJECTDIR, "/data/cinds_results.csv")
print("cinds")
output_result()
} else if (Sys.info()["user"] == "Catherine") {
PROJECTDIR <- file.path("Desktop", "INFO201", "Assignment", "a7-collaboration-jmjc")
fileName <- paste0(PROJECTDIR, "/data/catherine_results.csv")
print("catherine")
output_result()
} else {
PROJECTDIR <- file.path("home", "Desktop", "UW", "AU_18", "INFO_201", "a7-collaboration-jmjc")
fileName <- paste0(PROJECTDIR, "/data/yang_results.csv")
print("yang")
output_result()
}
dataset <- read.csv("/Users/cinds/desktop/info201/a1-collaboration-jmjc/data/UFOCoords.csv", stringsAsFactors = FALSE)
dataset <- read.csv("/Users/Cinds/desktop/info201/a1-collaboration-jmjc/data/UFOCoords.csv", stringsAsFactors = FALSE)
dataset <- read.csv("/Users/Cinds/desktop/info201/a7-collaboration-jmjc/data/UFOCoords.csv", stringsAsFactors = FALSE)
library(dplyr)
library(ggplot2)
library(microbenchmark)
## Reads in the UFOCoords data file into a data frame
dataset <- read.csv("/Users/Cinds/desktop/info201/a7-collaboration-jmjc/data/UFOCoords.csv", stringsAsFactors = FALSE)
## Function for filtering the data frame
ufo_filter_df <- function(dataset) {
usa_count <- dataset %>% count(Country == "USA")
}
## Function for filtering the tibble
ufo_filter_tibble <- function(dataset) {
## Creates a tibble from the data frame
data_tibble <- as_tibble(dataset)
usa_count_tib <- data_tibble %>% count(Country == "USA")
}
output_result <- function() {
## Runs microbenchmark on dataframe
res_1 <- microbenchmark(ufo_filter_df(dataset), times=500L)
## Runs microbenchmark on tibble
res_2 <- microbenchmark(ufo_filter_tibble(dataset), times=500L)
## Creates data frame from microbenchmark results
result_1 <- summary(res_1)
result_2 <- summary(res_2)
## Combines results of both tests
total <- rbind(result_1, result_2)
## Writes output to .csv file specified in if/else statement
write.csv(total, file = fileName)
}
## Sets enviornment for each team member. Uses fileName for output
if(Sys.info()["user"] == "griff") {
PROJECTDIR <- file.path("~", "info201_assignments", "assignment_7", "a7-collaboration-jmjc")
fileName <- paste0(PROJECTDIR, "/data/griff_results.csv")
print("yang, griff, catherine, cinds")
output_result()
} else if (Sys.info()["user"] == "cinds") {
PROJECTDIR <- file.path("Desktop", "INFO201", "a7-collaboration-jmjc")
fileName <- paste0(PROJECTDIR, "/data/cinds_results.csv")
print("cinds")
output_result()
} else if (Sys.info()["user"] == "Catherine") {
PROJECTDIR <- file.path("Desktop", "INFO201", "Assignment", "a7-collaboration-jmjc")
fileName <- paste0(PROJECTDIR, "/data/catherine_results.csv")
print("catherine")
output_result()
} else {
PROJECTDIR <- file.path("home", "Desktop", "UW", "AU_18", "INFO_201", "a7-collaboration-jmjc")
fileName <- paste0(PROJECTDIR, "/data/yang_results.csv")
print("yang")
output_result()
}
UFO_Sighting <- read.csv("/Users/Cinds/desktop/INFO201/a7-collaboration-jmjc/data/UFOCoords.csv", stringsAsFactors = FALSE)
UFO_Sighting <- read.csv("/Users/Cinds/desktop/INFO201/a7-collaboration-jmjc/data/UFOCoords.csv", stringsAsFactors = FALSE)
UFO_Frequency <- function(UFO_Sighting)
par(mfrow = c(0:500))
plot(UFO_Frequency$Date, UFO_Frequency$Country)
UFO_Frequency <- function(UFO_Sighting)
par(mfrow = c(0:500))
plot(UFO_Sightingy$Date, UFO_Sighting$Country)
UFO_Sighting <- read.csv("/Users/Cinds/desktop/INFO201/a7-collaboration-jmjc/data/UFOCoords.csv", stringsAsFactors = FALSE)
USA_Frequency <- function(UFO_Sighting) {
Data <- USA_Sighting %>% select(Date, State) %>%
filter(Country == "USA") %>%
count(State)
colnames(Data)[1] <- "state"
plot <-ggplot(data=UFO_Sighting_aggr,
aes(x=Month, y=Frequency, colour=Country)) +
geom_line() +
ggtitle("UFO Sighting in 2016") +
scale_x_date(labels = date_format("%B"), breaks = pretty_breaks(n=12)) +
scale_y_continuous(limits=c(0,550), breaks=pretty_breaks(n=15))
dataset <- read.csv("/Users/Cinds/desktop/INFO201/a7-collaboration-jmjc/data/UFOCoords.csv", stringsAsFactors = FALSE)
USAPastApperance <- function(dataset) {
filteredData <- dataset %>% select(Country, State) %>%
filter(Country == "USA") %>%
count(State, sort = TRUE)
colnames(filteredData)[1] <- "state"
plot <- plot_usmap(data = filteredData, values = "n", lines = "purple") +
scale_fill_continuous(low = "white", high = "purple", name = "Occurences", label = scales::comma) +
theme(legend.position = "right") +
labs(title = "2016 USA UFO Sightings by State")
}
dataset <- read.csv("/Users/Cinds/desktop/INFO201/a7-collaboration-jmjc/data/UFOCoords.csv", stringsAsFactors = FALSE)
USAPastApperance <- function(dataset) {
filteredData <- dataset %>% select(Country, State) %>%
filter(Country == "USA") %>%
count(State, sort = TRUE)
colnames(filteredData)[1] <- "state"
plot <- plot_usmap(data = filteredData, values = "n", lines = "purple") +
scale_fill_continuous(low = "white", high = "purple", name = "Occurences", label = scales::comma) +
theme(legend.position = "right") +
labs(title = "2016 USA UFO Sightings by State")
}
dataset <- read.csv("/Users/Cinds/desktop/INFO201/a7-collaboration-jmjc/data/UFOCoords.csv", stringsAsFactors = FALSE)
USAPastApperance <- function(dataset) {
filteredData <- dataset %>% select(Country, State) %>%
filter(Country == "USA") %>%
count(State, sort = TRUE)
colnames(filteredData)[1] <- "state"
plot <- plot_usmap(data = filteredData, values = "n", lines = "purple") +
scale_fill_continuous(low = "white", high = "purple", name = "Occurences", label = scales::comma) +
theme(legend.position = "right") +
labs(title = "2016 USA UFO Sightings by State")
}
USAPastApperance <- function(dataset) {
filteredData <- dataset %>% select(Country, State) %>%
filter(Country == "USA") %>%
count(State, sort = TRUE)
colnames(filteredData)[1] <- "state"
plot <- plot_usmap(data = filteredData, values = "n", lines = "purple") +
scale_fill_continuous(low = "white", high = "purple", name = "Occurences", label = scales::comma) +
theme(legend.position = "right") +
labs(title = "2016 USA UFO Sightings by State")
}
library(lubridate)
library(scales)
library(anytime)
library(dplyr)
UFO_Sighting <- read.csv("/Users/Cinds/desktop/INFO201/a7-collaboration-jmjc/data/UFOCoords.csv", stringsAsFactors = FALSE)
## In function below, give parameter 1 as DataFrame name (UFO_Sighting in our case) and Parameter 2 as country name (as mentioned in dataset)
PlotTrend(UFO_Sighting,"USA")  ##Enter "CANADA" to get graph for Canada
#Function definition
PlotTrend = function(dataset, countryname)
{
DataDate = dataset %>% filter(Country == countryname) %>% select(Date,Country)
DataDate$Date = as.Date(DataDate$Date,"%m/%d/%Y")
DataTab <-table(cut(DataDate$Date,'month'))
FilteredData<- data.frame(Date=format(as.Date(names(DataTab)),"%m/%y"), frequency=as.vector(DataTab))
library(lubridate)
library(scales)
library(anytime)
library(dplyr)
UFO_Sighting <- read.csv("/Users/Cinds/desktop/INFO201/a7-collaboration-jmjc/data/UFOCoords.csv", stringsAsFactors = FALSE)
## In function below, give parameter 1 as DataFrame name (UFO_Sighting in our case) and Parameter 2 as country name (as mentioned in dataset)
PlotTrend(UFO_Sighting,"USA")  ##Enter "CANADA" to get graph for Canada
#Function definition
PlotTrend = function(dataset, countryname)
{
DataDate = dataset %>% filter(Country == countryname) %>% select(Date,Country)
DataDate$Date = as.Date(DataDate$Date,"%m/%d/%Y")
DataTab <-table(cut(DataDate$Date,'month'))
FilteredData<- data.frame(Date=format(as.Date(names(DataTab)),"%m/%y"), frequency=as.vector(DataTab))
#to plot line graphs for US
#To rename x axis and y axis lables update parameters xlab and ylab
plot(x=anytime(FilteredData$Date),y = FilteredData$frequency,type = "l",col="red", main = "UFO Occurrence in 2016",xlab = "Month", ylab = "#Occurrences")
# to add data lables apply function below
text(anytime(FilteredData$Date),FilteredData$frequency, labels=FilteredData$frequency, cex= 0.7, offset = 10)
## In function below, give parameter 1 as DataFrame name (UFO_Sighting in our case) and Parameter 2 as country name (as mentioned in dataset)
PlotTrend(UFO_Sighting,"USA")  ##Enter "CANADA" to get graph for Canada
#Function definition
PlotTrend <- function(dataset, countryname)
{
DataDate = dataset %>% filter(Country == countryname) %>% select(Date,Country)
DataDate$Date = as.Date(DataDate$Date,"%m/%d/%Y")
DataTab <-table(cut(DataDate$Date,'month'))
FilteredData<- data.frame(Date=format(as.Date(names(DataTab)),"%m/%y"), frequency=as.vector(DataTab))
#to plot line graphs for US
#To rename x axis and y axis lables update parameters xlab and ylab
plot(x=anytime(FilteredData$Date),y = FilteredData$frequency,type = "l",col="red", main = "UFO Occurrence in 2016",xlab = "Month", ylab = "#Occurrences")
# to add data lables apply function below
text(anytime(FilteredData$Date),FilteredData$frequency, labels=FilteredData$frequency, cex= 0.7, offset = 10)
}
UFO_Sighting <- read.csv("/Users/Cinds/desktop/INFO201/a7-collaboration-jmjc/data/UFOCoords.csv", stringsAsFactors = FALSE)
library(lubridate)
library(scales)
library(anytime)
library(dplyr)
UFO_Sighting <- read.csv("/Users/Cinds/desktop/INFO201/a7-collaboration-jmjc/data/UFOCoords.csv", stringsAsFactors = FALSE)
PlotTrend(UFO_Sighting,"USA")  ##Enter "CANADA" to get graph for Canada
#Function definition
PlotTrend <- function(dataset, countryname)
{
DataDate = dataset %>% filter(Country == countryname) %>% select(Date,Country)
DataDate$Date = as.Date(DataDate$Date,"%m/%d/%Y")
DataTab <-table(cut(DataDate$Date,'month'))
FilteredData<- data.frame(Date=format(as.Date(names(DataTab)),"%m/%y"), frequency=as.vector(DataTab))
#Plot line graphs for US
#name x axis and y axis lables update parameters xlab and ylab
plot(x=anytime(FilteredData$Date),y = FilteredData$frequency,type = "l",col="red", main = "UFO Occurrence in 2016",xlab = "Month", ylab = "#Occurrences")
# add data lables apply function below
text(anytime(FilteredData$Date),FilteredData$frequency, labels=FilteredData$frequency, cex= 0.7, offset = 10)
}
UFO_Sighting = read.csv("UFOCoords.csv",stringsAsFactors = FALSE)
## In function below, give parameter 1 as DataFrame name (UFO_Sighting in our case) and Parameter 2 as country name (as mentioned in dataset)
PlotTrend(UFO_Sighting,"USA")  ##Enter "CANADA" to get graph for Canada
library(lubridate)
library(scales)
library(anytime)
library(dplyr)
UFO_Sighting = read.csv("UFOCoords.csv",stringsAsFactors = FALSE)
## In function below, give parameter 1 as DataFrame name (UFO_Sighting in our case) and Parameter 2 as country name (as mentioned in dataset)
PlotTrend(UFO_Sighting,"USA")  ##Enter "CANADA" to get graph for Canada
#Function definition
PlotTrend = function(dataset, countryname)
{
DataDate = dataset %>% filter(Country == countryname) %>% select(Date,Country)
DataDate$Date = as.Date(DataDate$Date,"%m/%d/%Y")
DataTab <-table(cut(DataDate$Date,'month'))
FilteredData<- data.frame(Date=format(as.Date(names(DataTab)),"%m/%y"), frequency=as.vector(DataTab))
#to plot line graphs for US
#To rename x axis and y axis lables update parameters xlab and ylab
plot(x=anytime(FilteredData$Date),y = FilteredData$frequency,type = "l",col="red", main = "UFO Occurrence in 2016",xlab = "Month", ylab = "#Occurrences")
# to add data lables apply function below
text(anytime(FilteredData$Date),FilteredData$frequency, labels=FilteredData$frequency, cex= 0.7, offset = 10)
}
UFO_Sighting = read.csv("UFOCoords.csv",stringsAsFactors = FALSE)
## In function below, give parameter 1 as DataFrame name (UFO_Sighting in our case) and Parameter 2 as country name (as mentioned in dataset)
PlotTrend(UFO_Sighting,"USA")  ##Enter "CANADA" to get graph for Canada
#Function definition
PlotTrend = function(dataset, countryname)
{
DataDate = dataset %>% filter(Country == countryname) %>% select(Date,Country)
DataDate$Date = as.Date(DataDate$Date,"%m/%d/%Y")
DataTab <-table(cut(DataDate$Date,'month'))
FilteredData<- data.frame(Date=format(as.Date(names(DataTab)),"%m/%y"), frequency=as.vector(DataTab))
#to plot line graphs for US
#To rename x axis and y axis lables update parameters xlab and ylab
plot(x=anytime(FilteredData$Date),y = FilteredData$frequency,type = "l",col="red", main = "UFO Occurrence in 2016",xlab = "Month", ylab = "Frequency")
# to add data lables apply function below
text(anytime(FilteredData$Date),FilteredData$frequency, labels=FilteredData$frequency, cex= 0.7, offset = 10)
}
library(lubridate)
library(scales)
library(anytime)
library(dplyr)
UFO_Sighting = read.csv("data/UFOCoords.csv",stringsAsFactors = FALSE)
## In function below, give parameter 1 as DataFrame name (UFO_Sighting in our case) and Parameter 2 as country name (as mentioned in dataset)
##Enter "CANADA" to get graph for Canada
#Function definition
PlotTrend <- function(dataset, countryname)
{
DataDate <- dataset %>% filter(Country == countryname) %>% select(Date,Country)
DataDate$Date <- as.Date(DataDate$Date,"%m/%d/%Y")
DataTab <- table(cut(DataDate$Date,'month'))
FilteredData<- data.frame(Date=format(as.Date(names(DataTab)),"%m/%y"), frequency=as.vector(DataTab))
#plot line graphs for US
#name x axis and y axis lables update parameters xlab and ylab
plot(x=anytime(FilteredData$Date),y = FilteredData$frequency,type = "l",col="red", main = "UFO Occurrence in 2016",xlab = "Month", ylab = "#Occurrences")
#add data lables apply function below
text(anytime(FilteredData$Date),FilteredData$frequency, labels=FilteredData$frequency, cex= 0.7, offset = 10)
}
PlotTrend(UFO_Sighting,"USA")
UFO_Sighting = read.csv("data/UFOCoords.csv",stringsAsFactors = FALSE)
## In function below, give parameter 1 as DataFrame name (UFO_Sighting in our case) and Parameter 2 as country name (as mentioned in dataset)
##Enter "CANADA" to get graph for Canada
#Function definition
PlotTrend <- function(dataset, countryname)
{
DataDate <- dataset %>% filter(Country == countryname) %>% select(Date,Country)
DataDate$Date <- as.Date(DataDate$Date,"%m/%d/%Y")
DataTab <- table(cut(DataDate$Date,'month'))
FilteredData<- data.frame(Date=format(as.Date(names(DataTab)),"%m/%y"), frequency=as.vector(DataTab))
#plot line graphs for US
#name x axis and y axis lables update parameters xlab and ylab
plot(x=anytime(FilteredData$Date),y = FilteredData$frequency,type = "l",col="red", main = "UFO Occurrence in 2016",xlab = "Month", ylab = "Frequency")
#add data lables apply function below
text(anytime(FilteredData$Date),FilteredData$frequency, labels=FilteredData$frequency, cex= 0.7, offset = 10)
}
PlotTrend(UFO_Sighting,"USA")
library(lubridate)
library(scales)
library(anytime)
library(dplyr)
UFO_Sighting = read.csv("data/UFOCoords.csv",stringsAsFactors = FALSE)
## In function below, give parameter 1 as DataFrame name (UFO_Sighting) and Parameter 2 as country name (in dataset)
##Enter "CANADA" to get graph for Canada
#Function definition
PlotTrend <- function(dataset, countryname)
{
DataDate <- dataset %>% filter(Country == countryname) %>% select(Date,Country)
DataDate$Date <- as.Date(DataDate$Date,"%m/%d/%Y")
DataTab <- table(cut(DataDate$Date,'month'))
FilteredData<- data.frame(Date=format(as.Date(names(DataTab)),"%m/%y"), frequency=as.vector(DataTab))
#to plot line graphs for US
#name x axis and y axis lables update parameters xlab and ylab
plot(x=anytime(FilteredData$Date),y = FilteredData$frequency,type = "l",col="red", main = "UFO Occurrence in 2016",xlab = "Month", ylab = "#Occurrences")
#add data lables apply function below
text(anytime(FilteredData$Date),FilteredData$frequency, labels=FilteredData$frequency, cex= 0.7, offset = 10)
}
PlotTrend(UFO_Sighting,"USA")
library(lubridate)
library(scales)
library(anytime)
library(dplyr)
UFO_Sighting = read.csv("data/UFOCoords.csv",stringsAsFactors = FALSE)
## In function below, give parameter 1 as DataFrame name (UFO_Sighting) and Parameter 2 as country name (in dataset)
##Enter "CANADA" to get graph for Canada
#Function definition
PlotTrend <- function(dataset, countryname)
{
DataDate <- dataset %>% filter(Country == countryname) %>% select(Date,Country)
DataDate$Date <- as.Date(DataDate$Date,"%m/%d/%Y")
DataTab <- table(cut(DataDate$Date,'month'))
FilteredData<- data.frame(Date=format(as.Date(names(DataTab)),"%m/%y"), frequency=as.vector(DataTab))
#to plot line graphs for US
#name x axis and y axis lables update parameters xlab and ylab
plot(x=anytime(FilteredData$Date),y = FilteredData$frequency,type = "l",col="red", main = "UFO Occurrence in 2016",xlab = "Month", ylab = "Frequency")
#add data lables apply function below
text(anytime(FilteredData$Date),FilteredData$frequency, labels=FilteredData$frequency, cex= 0.7, offset = 10)
}
PlotTrend(UFO_Sighting,"USA")
shiny::runApp('Desktop/INFO201/a8-app-cindyvu4/a8-cindyvu4')
runApp('Desktop/INFO201/a8-app-cindyvu4/a8-cindyvu4')
getwd()
runApp('Desktop/INFO201/a8-app-cindyvu4/a8-cindyvu4')
runApp('Desktop/INFO201/a8-app-cindyvu4/a8-cindyvu4')
runApp('Desktop/INFO201/a8-app-cindyvu4/a8-cindyvu4')
runApp('Desktop/INFO201/a8-app-cindyvu4/a8-cindyvu4')
runApp('Desktop/INFO201/a8-app-cindyvu4/a8-cindyvu4')
runApp('Desktop/INFO201/a8-app-cindyvu4/a8-cindyvu4')
runApp('Desktop/INFO201/a8-app-cindyvu4/a8-cindyvu4')
runApp('Desktop/INFO201/a8-app-cindyvu4/a8-cindyvu4')
runApp('Desktop/INFO201/a8-app-cindyvu4/a8-cindyvu4')
runApp('Desktop/INFO201/a8-app-cindyvu4/a8-cindyvu4')
runApp('Desktop/INFO201/a8-app-cindyvu4/a8-cindyvu4')
runApp('Desktop/INFO201/a8-app-cindyvu4/a8-cindyvu4')
runApp('Desktop/INFO201/a8-app-cindyvu4/a8-cindyvu4')
runApp('Desktop/INFO201/a8-app-cindyvu4/a8-cindyvu4')
runApp('Desktop/INFO201/a8-app-cindyvu4/a8-cindyvu4')
runApp('Desktop/INFO201/a8-app-cindyvu4/a8-cindyvu4')
runApp('Desktop/INFO201/a8-app-cindyvu4/a8-cindyvu4')
runApp('Desktop/INFO201/a8-app-cindyvu4/a8-cindyvu4')
runApp('Desktop/INFO201/a8-app-cindyvu4/a8-cindyvu4')
runApp('Desktop/INFO201/a8-app-cindyvu4/a8-cindyvu4')
runApp('Desktop/INFO201/a8-app-cindyvu4/a8-cindyvu4')
runApp('Desktop/INFO201/a8-app-cindyvu4/a8-cindyvu4')
runApp('Desktop/INFO201/a8-app-cindyvu4/a8-cindyvu4')
runApp('Desktop/INFO201/a8-app-cindyvu4/a8-cindyvu4')
View(data)
runApp('Desktop/INFO201/a8-app-cindyvu4/a8-cindyvu4')
runApp('Desktop/INFO201/a8-app-cindyvu4/a8-cindyvu4')
runApp('Desktop/INFO201/a8-app-cindyvu4/a8-cindyvu4')
runApp('Desktop/INFO201/a8-app-cindyvu4/a8-cindyvu4')
View(UFO_Sighting)
runApp('Desktop/INFO201/a8-app-cindyvu4/a8-cindyvu4')
shiny::runApp('Desktop/INFO201/a8-app-cindyvu4/a8-cindyvu4')
runApp('Desktop/INFO201/a8-app-cindyvu4/a8-cindyvu4')
runApp('Desktop/INFO201/a8-app-cindyvu4/a8-cindyvu4')
runApp('Desktop/INFO201/a8-app-cindyvu4/a8-cindyvu4')
runApp('Desktop/INFO201/a8-app-cindyvu4/a8-cindyvu4')
runApp('Desktop/INFO201/a8-app-cindyvu4/a8-cindyvu4')
runApp('Desktop/INFO201/a8-app-cindyvu4/a8-cindyvu4')
runApp('Desktop/INFO201/a8-app-cindyvu4/a8-cindyvu4')
runApp('Desktop/INFO201/a8-app-cindyvu4/a8-cindyvu4')
runApp('Desktop/INFO201/a8-app-cindyvu4/a8-cindyvu4')
runApp('Desktop/INFO201/a8-app-cindyvu4/a8-cindyvu4')
runApp('Desktop/INFO201/a8-app-cindyvu4/a8-cindyvu4')
runApp('Desktop/INFO201/a8-app-cindyvu4/a8-cindyvu4')
runApp('Desktop/INFO201/a8-app-cindyvu4/a8-cindyvu4')
shiny::runApp('Desktop/INFO201/a8-app-cindyvu4/a8-cindyvu4')
runApp('Desktop/INFO201/a8-app-cindyvu4/a8-cindyvu4')
shiny::runApp('Desktop/INFO201/a8-app-cindyvu4/Cindy_shiny')
runApp('Desktop/INFO201/a8-app-cindyvu4/Cindy_shiny')
runApp('Desktop/INFO201/a8-app-cindyvu4/Cindy_shiny')
runApp('Desktop/INFO201/a8-app-cindyvu4/Cindy_shiny')
runApp('Desktop/INFO201/a8-app-cindyvu4/Cindy_shiny')
runApp('Desktop/INFO201/a8-app-cindyvu4/Cindy_shiny')
shiny::runApp('Desktop/INFO201/a8-app-cindyvu4/Cindy_shiny')
runApp('Desktop/INFO201/a8-app-cindyvu4/Cindy_shiny')
runApp('Desktop/INFO201/a8-app-cindyvu4/Cindy_shiny')
runApp('Desktop/INFO201/a8-app-cindyvu4/Cindy_shiny')
runApp('Desktop/INFO201/a8-app-cindyvu4/Cindy_shiny')
runApp('Desktop/INFO201/a8-app-cindyvu4/Cindy_shiny')
runApp('Desktop/INFO201/a8-app-cindyvu4/Cindy_shiny')
runApp('Desktop/INFO201/a8-app-cindyvu4/Cindy_shiny')
runApp('Desktop/INFO201/a8-app-cindyvu4/Cindy_shiny')
runApp('Desktop/INFO201/a8-app-cindyvu4/Cindy_shiny')
runApp('Desktop/INFO201/a8-app-cindyvu4/Cindy_shiny')
runApp('Desktop/INFO201/a8-app-cindyvu4/Cindy_shiny')
runApp('Desktop/INFO201/a8-app-cindyvu4/Cindy_shiny')
runApp('Desktop/INFO201/a8-app-cindyvu4/Cindy_shiny')
runApp('Desktop/INFO201/a8-app-cindyvu4/Cindy_shiny')
runApp('Desktop/INFO201/a8-app-cindyvu4/Cindy_shiny')
runApp('Desktop/INFO201/a8-app-cindyvu4/Cindy_shiny')
runApp('Desktop/INFO201/a8-app-cindyvu4/Cindy_shiny')
shiny::runApp('Desktop/INFO201/a8-app-cindyvu4/Cindy_shiny')
install.packages("urbnmapr")
library(dplyr)
shiny::runApp('Desktop/INFO201/INFO201-GroupProject/FinalProject')
install.packages(shinythemes)
install.packages("shinythemes")
library(shinythemes)
runApp('Desktop/INFO201/INFO201-GroupProject/FinalProject')
library(shiny)
library(ggplot2)
library(dplyr)
library(usmap)
library(lubridate)
library(urbnmapr)
install.packages("urbnmapr")
shiny::runApp('Desktop/INFO201/INFO201-GroupProject/FinalProject')
install.packages(devtools)
install.packages("devtools")
runApp('Desktop/INFO201/INFO201-GroupProject/FinalProject')
runApp('Desktop/INFO201/INFO201-GroupProject/FinalProject')
install.packages("urbnmapr")
devtools::install_github(“UrbanInstitute/urbnmapr”)
devtools::install_github("UrbanInstitute/urbnmapr")
runApp('Desktop/INFO201/INFO201-GroupProject/FinalProject')
library("urbnmapr", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
shiny::runApp('Desktop/INFO201/INFO201-GroupProject/FinalProject')
runApp('Desktop/INFO201/INFO201-GroupProject/FinalProject')
runApp('Desktop/INFO201/INFO201-GroupProject/FinalProject')
library("tidyverse", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library("lubridate", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library("usmap", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
runApp('Desktop/INFO201/INFO201-GroupProject/FinalProject')
install.packages("DT")
runApp('Desktop/INFO201/INFO201-GroupProject/FinalProject')
runApp('Desktop/INFO201/INFO201-GroupProject/FinalProject')
runApp('Desktop/INFO201/INFO201-GroupProject/FinalProject')
runApp('Desktop/INFO201/INFO201-GroupProject/FinalProject')
runApp('Desktop/INFO201/INFO201-GroupProject/FinalProject')
runApp('Desktop/INFO201/INFO201-GroupProject/FinalProject')
runApp('Desktop/INFO201/INFO201-GroupProject/FinalProject')
runApp('Desktop/INFO201/INFO201-GroupProject/FinalProject')
runApp('Desktop/INFO201/INFO201-GroupProject/FinalProject')
runApp('Desktop/INFO201/INFO201-GroupProject/FinalProject')
runApp('Desktop/INFO201/INFO201-GroupProject/FinalProject')
runApp('Desktop/INFO201/INFO201-GroupProject/FinalProject')
runApp('Desktop/INFO201/INFO201-GroupProject/FinalProject')
runApp('Desktop/INFO201/INFO201-GroupProject/FinalProject')
runApp('Desktop/INFO201/INFO201-GroupProject/FinalProject')
runApp('Desktop/INFO201/INFO201-GroupProject/FinalProject')
runApp('Desktop/INFO201/INFO201-GroupProject/FinalProject')
runApp('Desktop/INFO201/INFO201-GroupProject/FinalProject')
runApp('Desktop/INFO201/INFO201-GroupProject/FinalProject')
runApp('Desktop/INFO201/INFO201-GroupProject/FinalProject')
runApp('Desktop/INFO201/INFO201-GroupProject/FinalProject')
runApp('Desktop/INFO201/INFO201-GroupProject/FinalProject')
shiny::runApp('Desktop/INFO201/INFO201-GroupProject/FinalProject')
install.packages("plotly")
runApp('Desktop/INFO201/INFO201-GroupProject/FinalProject')
setwd(/user/cinds/desktop/info201)
setwd(user/cinds/desktop/info201/info201-groupproject)
setwd(users/cinds/desktop/info201/info201-groupproject)
setwd("users/cinds/desktop/info201/info201-groupproject")
setwd("/Users/Cinds/desktop/INFO201/info201-groupproject")
ls
wd
getwd
getwd()
setwd("/Users/Cinds/desktop/INFO201/info201-groupproject/FinalProject/Script")
)
setwd("/Users/Cinds/desktop/INFO201/info201-groupproject/FinalProject/Script")
setwd("/Users/Cinds/desktop/INFO201/info201-groupproject/FinalProject/")
getwd()
setwd("/Users/Cinds/desktop/INFO201/info201-groupproject/FinalProject/Script")
setwd("/Users/Cinds/desktop/INFO201/info201-groupproject")
getwd()
runApp('FinalProject')
runApp('FinalProject')
runApp('FinalProject')
runApp('FinalProject')
runApp('FinalProject')
runApp('FinalProject')
runApp('FinalProject')
runApp('FinalProject')
runApp('FinalProject')
runApp('FinalProject')
runApp('FinalProject')
